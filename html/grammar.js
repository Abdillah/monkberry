/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,6],$V2=[1,8],$V3=[1,28],$V4=[1,49],$V5=[1,13],$V6=[1,19],$V7=[1,46],$V8=[1,27],$V9=[1,31],$Va=[1,39],$Vb=[1,40],$Vc=[1,25],$Vd=[1,22],$Ve=[1,57],$Vf=[1,58],$Vg=[1,54],$Vh=[1,55],$Vi=[1,56],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,50],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,65],$Vt=[5,9,10,12,17,21,37],$Vu=[1,67],$Vv=[1,68],$Vw=[5,9,10,12,17,19,21,23,34,37,39,43,58],$Vx=[5,9,10,12,15,16,17,19,21,23,34,37,39,43,58,70,71,75,76,79,80,81,83,84,85,86,88,89,90,91,93,95,97],$Vy=[2,72],$Vz=[1,72],$VA=[1,73],$VB=[9,13,15,27,30,33,36,37,38,50,53,63,64,67,68,69,70,71,72,73,100,113,114,115,116],$VC=[1,91],$VD=[1,90],$VE=[5,9,10,12,15,16,17,19,21,23,26,34,37,39,43,58,63,64,70,71,75,76,79,80,81,83,84,85,86,88,89,90,91,93,95,97,99,100,101,102,103,104,105,106,107,108,109],$VF=[1,95],$VG=[1,96],$VH=[5,9,10,12,17,19,21,23,34,37,39,43,58,95,97],$VI=[1,97],$VJ=[2,52],$VK=[1,99],$VL=[1,100],$VM=[5,9,10,12,17,19,21,23,34,37,39,43,58,93,95,97],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[5,9,10,12,15,16,17,19,21,23,26,33,34,36,37,39,43,51,58,63,64,70,71,75,76,79,80,81,83,84,85,86,88,89,90,91,93,95,97,99,100,101,102,103,104,105,106,107,108,109],$VS=[5,9,10,17,19,21,23,34,37,39,43,58,88,89,90,91,93,95,97],$VT=[1,107],$VU=[1,108],$VV=[1,109],$VW=[1,110],$VX=[1,111],$VY=[1,112],$VZ=[5,9,10,12,16,17,19,21,23,34,37,39,43,58,83,84,85,86,88,89,90,91,93,95,97],$V_=[1,114],$V$=[1,115],$V01=[1,116],$V11=[1,124],$V21=[1,141],$V31=[1,147],$V41=[1,144],$V51=[1,150],$V61=[1,143],$V71=[1,142],$V81=[1,157],$V91=[1,155],$Va1=[1,156],$Vb1=[1,129],$Vc1=[1,130],$Vd1=[1,131],$Ve1=[1,132],$Vf1=[1,133],$Vg1=[1,134],$Vh1=[1,135],$Vi1=[1,136],$Vj1=[1,137],$Vk1=[1,138],$Vl1=[1,139],$Vm1=[1,140],$Vn1=[1,145],$Vo1=[1,146],$Vp1=[1,148],$Vq1=[1,149],$Vr1=[1,151],$Vs1=[1,152],$Vt1=[1,153],$Vu1=[1,154],$Vv1=[1,158],$Vw1=[1,159],$Vx1=[1,160],$Vy1=[1,161],$Vz1=[1,162],$VA1=[1,163],$VB1=[1,164],$VC1=[5,9,10,12,16,17,19,21,23,34,37,39,43,58,79,80,81,83,84,85,86,88,89,90,91,93,95,97],$VD1=[1,165],$VE1=[1,166],$VF1=[5,9,10,12,16,17,19,21,23,34,37,39,43,58,70,71,79,80,81,83,84,85,86,88,89,90,91,93,95,97],$VG1=[1,169],$VH1=[1,168],$VI1=[1,170],$VJ1=[2,130],$VK1=[1,185],$VL1=[1,187],$VM1=[13,15,27,30,33,36,38,50,53,63,64,67,68,69,70,71,72,73,100,113,114,115,116],$VN1=[9,19,23,34,37,58],$VO1=[9,39],$VP1=[2,62],$VQ1=[33,43],$VR1=[13,15,16];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Document":3,"ElementList":4,"EOF":5,"Element":6,"AssignmentExpression":7,"Elision":8,",":9,"TEXT":10,"Statement":11,"<":12,"IDENTIFIER":13,"AttributeList":14,"/":15,">":16,"{{":17,"ExpressionStatement":18,"}}":19,"IfStatement":20,"{%":21,"IF":22,"%}":23,"ENDIF":24,"Attribute":25,"=":26,"STRING_LITERAL":27,"Expression":28,"PrimaryExpression":29,"THIS":30,"Literal":31,"ArrayLiteral":32,"(":33,")":34,"ObjectLiteral":35,"[":36,"]":37,"{":38,"}":39,"PropertyNameAndValueList":40,"PropertyAssignment":41,"PropertyName":42,":":43,"FunctionBody":44,"PropertySetParameterList":45,"IdentifierName":46,"StringLiteral":47,"NumericLiteral":48,"MemberExpression":49,"FunctionExpression":50,".":51,"AccessorName":52,"NEW":53,"Arguments":54,"NewExpression":55,"CallExpression":56,"FilterExpression":57,"|":58,"ReservedWord":59,"ArgumentList":60,"LeftHandSideExpression":61,"PostfixExpression":62,"++":63,"--":64,"UnaryExpression":65,"UnaryExpr":66,"TYPEOF":67,"BR++":68,"BR--":69,"+":70,"-":71,"~":72,"!":73,"MultiplicativeExpression":74,"*":75,"%":76,"AdditiveExpression":77,"ShiftExpression":78,"<<":79,">>":80,">>>":81,"RelationalExpression":82,"<=":83,">=":84,"INSTANCEOF":85,"IN":86,"EqualityExpression":87,"==":88,"!=":89,"===":90,"!==":91,"LogicalANDExpression":92,"&&":93,"LogicalORExpression":94,"||":95,"ConditionalExpression":96,"?":97,"AssignmentOperator":98,"*=":99,"/=":100,"%=":101,"+=":102,"-=":103,"<<=":104,">>=":105,">>>=":106,"&=":107,"^=":108,"|=":109,"NullLiteral":110,"BooleanLiteral":111,"RegularExpressionLiteral":112,"NULL":113,"TRUE":114,"FALSE":115,"NUMERIC_LITERAL":116,"RegularExpressionLiteralBegin":117,"REGEXP_LITERAL":118,"BREAK":119,"CASE":120,"CATCH":121,"CONTINUE":122,"DEBUGGER":123,"DEFAULT":124,"DELETE":125,"DO":126,"ELSE":127,"FINALLY":128,"FOR":129,"FUNCTION":130,"RETURN":131,"SWITCH":132,"THROW":133,"TRY":134,"VAR":135,"VOID":136,"WHILE":137,"WITH":138,"CLASS":139,"CONST":140,"ENUM":141,"EXPORT":142,"EXTENDS":143,"IMPORT":144,"SUPER":145,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:",",10:"TEXT",12:"<",13:"IDENTIFIER",15:"/",16:">",17:"{{",19:"}}",21:"{%",22:"IF",23:"%}",24:"ENDIF",26:"=",27:"STRING_LITERAL",30:"THIS",33:"(",34:")",36:"[",37:"]",38:"{",39:"}",43:":",44:"FunctionBody",50:"FunctionExpression",51:".",53:"NEW",58:"|",63:"++",64:"--",67:"TYPEOF",68:"BR++",69:"BR--",70:"+",71:"-",72:"~",73:"!",75:"*",76:"%",79:"<<",80:">>",81:">>>",83:"<=",84:">=",85:"INSTANCEOF",86:"IN",88:"==",89:"!=",90:"===",91:"!==",93:"&&",95:"||",97:"?",99:"*=",100:"/=",101:"%=",102:"+=",103:"-=",104:"<<=",105:">>=",106:">>>=",107:"&=",108:"^=",109:"|=",113:"NULL",114:"TRUE",115:"FALSE",116:"NUMERIC_LITERAL",118:"REGEXP_LITERAL",119:"BREAK",120:"CASE",121:"CATCH",122:"CONTINUE",123:"DEBUGGER",124:"DEFAULT",125:"DELETE",126:"DO",127:"ELSE",128:"FINALLY",129:"FOR",130:"FUNCTION",131:"RETURN",132:"SWITCH",133:"THROW",134:"TRY",135:"VAR",136:"VOID",137:"WHILE",138:"WITH",139:"CLASS",140:"CONST",141:"ENUM",142:"EXPORT",143:"EXTENDS",144:"IMPORT",145:"SUPER"},
productions_: [0,[3,2],[4,1],[4,2],[4,0],[4,1],[4,2],[4,3],[4,4],[6,1],[6,1],[6,5],[6,8],[6,9],[11,3],[11,1],[20,8],[14,1],[14,2],[14,0],[25,3],[18,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1],[32,2],[32,3],[32,3],[32,4],[32,5],[8,1],[8,2],[35,2],[35,3],[35,4],[40,1],[40,3],[41,3],[41,7],[41,8],[42,1],[42,1],[42,1],[45,1],[49,1],[49,1],[49,4],[49,3],[49,3],[55,1],[55,2],[56,2],[56,2],[56,4],[56,3],[57,3],[57,4],[57,3],[57,4],[46,1],[46,1],[52,1],[52,1],[54,2],[54,3],[60,1],[60,3],[61,1],[61,1],[62,1],[62,2],[62,2],[65,1],[65,1],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[74,1],[74,3],[74,3],[74,3],[77,1],[77,3],[77,3],[78,1],[78,3],[78,3],[78,3],[82,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[87,1],[87,3],[87,3],[87,3],[87,3],[92,1],[92,3],[94,1],[94,3],[96,1],[96,5],[7,1],[7,1],[7,3],[7,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[28,1],[28,3],[31,1],[31,1],[31,1],[31,1],[31,1],[110,1],[111,1],[111,1],[48,1],[47,1],[112,2],[117,1],[117,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = new DocumentNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0]));
            return this.$;
        
break;
case 2: case 5: case 38: case 68:

            this.$ = [$$[$0]];
        
break;
case 3: case 6: case 18:

            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 4: case 19: case 66:

            this.$ = [];
        
break;
case 7: case 39: case 69:

            this.$ = $$[$0-2].concat($$[$0]);
        
break;
case 8:

            this.$ = $$[$0-3].concat($$[$0-1]).concat($$[$0]);
        
break;
case 9:

          this.$ = new TextNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 10:

            this.$ = $$[$0];
        
break;
case 11:

            this.$ = new ElementNode($$[$0-3], $$[$0-2], [], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 12:

            if ($$[$0-6] == $$[$0-1]) {
                this.$ = new ElementNode($$[$0-6], $$[$0-5], [], createSourceLocation(null, _$[$0-7], _$[$0]));
            } else {
                throw new SyntaxError(
                    "Syntax error on line " + (yylineno + 1) + ":\n" +
                    "Tag identifiers should be same (<" + $$[$0-6] + "> != </" + $$[$0-1] + ">)"
                );
            }
        
break;
case 13:

            if ($$[$0-7] == $$[$0-1]) {
                this.$ = new ElementNode($$[$0-7], $$[$0-6], $$[$0-4], createSourceLocation(null, _$[$0-8], _$[$0]));
            } else {
                throw new SyntaxError(
                    "Syntax error on line " + (yylineno + 1) + ":\n" +
                    "Tag identifiers should be same (<" + $$[$0-7] + "> != </" + $$[$0-2] + ">)"
                );
            }
        
break;
case 14: case 26: case 67:

            this.$ = $$[$0-1];
        
break;
case 16:

          this.$ = new IfStatementNode($$[$0-5], $$[$0-3], null, createSourceLocation(null, _$[$0-7], _$[$0]));
        
break;
case 17:

            this.$ = [$$[$0]]
        
break;
case 20:

            this.$ = new AttributeNode($$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 21:

            this.$ = new ExpressionStatementNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 22:

            this.$ = new ThisExpressionNode(createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 23: case 62: case 63:

            this.$ = new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 28:

            this.$ = new ArrayExpressionNode([], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 29: case 30:

            this.$ = new ArrayExpressionNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 31:

            this.$ = new ArrayExpressionNode($$[$0-2].concat(null), createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 32:

            this.$ = new ArrayExpressionNode($$[$0-3].concat($$[$0-1]), createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 33:

            this.$ = [null, null];
        
break;
case 34:

            this.$ = $$[$0-1].concat(null);
        
break;
case 35:

            this.$ = new ObjectExpressionNode([], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 36:

            this.$ = new ObjectExpressionNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 37:

            this.$ = new ObjectExpressionNode($$[$0-2], createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 40:

            this.$ = {key: $$[$0-2], value: $$[$0], kind: "init"};
        
break;
case 41:

            if ($$[$0-6] === "get") {
                this.$ = {key: $$[$0-5], value: (new FunctionExpressionNode(null, [], $$[$0-1], false, false, createSourceLocation(null, _$[$0-5], _$[$0]))), kind: "get"};
            } else {
                this.parseError("Invalid getter", {});
            }
        
break;
case 42:

            if ($$[$0-7] === "set") {
                this.$ = {key: $$[$0-6], value: (new FunctionExpressionNode(null, $$[$0-4], $$[$0-1], false, false, createSourceLocation(null, _$[$0-6], _$[$0]))), kind: "set"};
            } else {
                this.parseError("Invalid setter", {});
            }
        
break;
case 46:

            this.$ = [new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]))];
        
break;
case 49: case 56:

            this.$ = new MemberExpressionNode($$[$0-3], $$[$0-1], true, createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 50: case 57:

            this.$ = new MemberExpressionNode($$[$0-2], $$[$0], false, createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 51:

            this.$ = new NewExpressionNode($$[$0-1], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 53:

            this.$ = new NewExpressionNode($$[$0], null, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 54: case 55:

            this.$ = new CallExpressionNode($$[$0-1], $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 58: case 60:

            this.$ = new FilterExpressionNode($$[$0], [$$[$0-2]], createSourceLocation(null, _$[$0-2], _$[$0-1]));
        
break;
case 59: case 61:

            this.$ = new FilterExpressionNode($$[$0-1], [$$[$0-3]].concat($$[$0]), createSourceLocation(null, _$[$0-3], _$[$0-2]));
        
break;
case 64: case 65:

            this.$ = new AccessorNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 73:

            this.$ = new UpdateExpressionNode("++", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 74:

            this.$ = new UpdateExpressionNode("--", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 77:

            this.$ = new UnaryExpressionNode("typeof", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 78:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("++", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 79:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("--", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 80:

            this.$ = new UpdateExpressionNode("++", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 81:

            this.$ = new UpdateExpressionNode("--", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 82:

            this.$ = new UnaryExpressionNode("+", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 83:

            this.$ = new UnaryExpressionNode("-", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 84:

            this.$ = new UnaryExpressionNode("~", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 85:

            this.$ = new UnaryExpressionNode("!", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 87:

            this.$ = new BinaryExpressionNode("*", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 88:

            this.$ = new BinaryExpressionNode("/", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 89:

            this.$ = new BinaryExpressionNode("%", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 91:

            this.$ = new BinaryExpressionNode("+", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 92:

            this.$ = new BinaryExpressionNode("-", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 94:

            this.$ = new BinaryExpressionNode("<<", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 95:

            this.$ = new BinaryExpressionNode(">>", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 96:

            this.$ = new BinaryExpressionNode(">>>", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 98:

            this.$ = new BinaryExpressionNode("<", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 99:

            this.$ = new BinaryExpressionNode(">", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 100:

            this.$ = new BinaryExpressionNode("<=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 101:

            this.$ = new BinaryExpressionNode(">=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 102:

            this.$ = new BinaryExpressionNode("instanceof", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 103:

            this.$ = new BinaryExpressionNode("in", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 105:

            this.$ = new BinaryExpressionNode("==", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 106:

            this.$ = new BinaryExpressionNode("!=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 107:

            this.$ = new BinaryExpressionNode("===", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 108:

            this.$ = new BinaryExpressionNode("!==", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 110:

            this.$ = new LogicalExpressionNode("&&", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 112:

            this.$ = new LogicalExpressionNode("||", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 114:

            this.$ = new ConditionalExpressionNode($$[$0-4], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 117:

            this.$ = new AssignmentExpressionNode("=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 118:

            this.$ = new AssignmentExpressionNode($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 131:

            if ($$[$0-2].type === "SequenceExpression") {
                $$[$0-2].expressions.concat($$[$0]);
                $$[$0-2].loc = createSourceLocation(null, _$[$0-2], _$[$0]);
                this.$ = $$[$0-2];
            } else {
                this.$ = new SequenceExpressionNode([$$[$0-2], $$[$0]], createSourceLocation(null, _$[$0-2], _$[$0]));
            }
        
break;
case 137:

            this.$ = new LiteralNode(null, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 138:

            this.$ = new LiteralNode(true, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 139:

            this.$ = new LiteralNode(false, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 140:

            this.$ = new LiteralNode(parseNumericLiteral($$[$0]), createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 141:

            this.$ = new LiteralNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 142:

            this.$ = new LiteralNode(parseRegularExpressionLiteral($$[$0-1] + $$[$0]), createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 143: case 144:

            yy.lexer.begin("regexp");
        
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,7:4,8:5,9:$V0,10:$V1,11:7,12:$V2,13:$V3,15:$V4,17:$V5,20:14,21:$V6,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{1:[3]},{5:[1,63],6:64,9:$Vs,10:$V1,11:7,12:$V2,17:$V5,20:14,21:$V6},o($Vt,[2,2]),o([5,9,10,12,17,21,37,58],[2,5]),{7:66,9:$Vu,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vt,[2,9]),o($Vt,[2,10]),{13:$Vv},o($Vw,[2,115]),o([5,9,10,12,17,19,21,23,34,37,39,43],[2,116],{58:[1,69]}),o($Vx,$Vy,{98:71,26:[1,70],63:$Vz,64:$VA,99:[1,74],100:[1,75],101:[1,76],102:[1,77],103:[1,78],104:[1,79],105:[1,80],106:[1,81],107:[1,82],108:[1,83],109:[1,84]}),o($VB,[2,33]),{7:87,13:$V3,15:$V4,18:85,27:$V7,28:86,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vt,[2,15]),o($Vw,[2,113],{95:[1,89],97:[1,88]}),{9:$VC,58:$VD},o($VE,[2,70]),o($VE,[2,71],{54:92,33:$VF,36:[1,93],51:[1,94]}),{22:$VG},o($VH,[2,111],{93:$VI}),o($VE,$VJ,{54:98,33:$VF,36:$VK,51:$VL}),{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:102,50:$Vc,53:$Vd,55:101,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VM,[2,109],{88:$VN,89:$VO,90:$VP,91:$VQ}),o($VR,[2,47]),o($VR,[2,48]),o($VS,[2,104],{12:$VT,16:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($VR,[2,22]),o($VR,[2,23]),o($VR,[2,24]),o($VR,[2,25]),{7:87,13:$V3,15:$V4,27:$V7,28:113,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,27]),o($VZ,[2,97],{79:$V_,80:$V$,81:$V01}),o($VR,[2,132]),o($VR,[2,133]),o($VR,[2,134]),o($VR,[2,135]),o($VR,[2,136]),{4:119,6:3,7:4,8:118,9:$V0,10:$V1,11:7,12:$V2,13:$V3,15:$V4,17:$V5,20:14,21:$V6,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,37:[1,117],38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V11,22:$V21,27:$V7,30:$V31,39:[1,120],40:121,41:122,42:123,46:125,47:126,48:127,53:$V41,59:128,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,116:$Vr,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},o($VC1,[2,93],{70:$VD1,71:$VE1}),o($VR,[2,137]),o($VR,[2,138]),o($VR,[2,139]),o($VR,[2,140]),o($VR,[2,141]),{118:[1,167]},o($VF1,[2,90],{15:$VG1,75:$VH1,76:$VI1}),{118:[2,143]},{118:[2,144]},o($Vx,[2,86]),o($Vx,[2,75]),o($Vx,[2,76]),{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:171,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:173,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:174,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:175,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:176,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:177,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:178,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:179,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:180,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{1:[2,1]},o($Vt,[2,3]),{7:181,8:182,9:$V0,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vt,[2,6],{58:$VJ1}),o($VB,[2,34]),o([15,16],[2,19],{14:183,25:184,13:$VK1}),{13:$VL1,22:$V21,30:$V31,52:186,53:$V41,59:188,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},{7:189,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{7:190,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vx,[2,73]),o($Vx,[2,74]),o($VM1,[2,119]),o($VM1,[2,120]),o($VM1,[2,121]),o($VM1,[2,122]),o($VM1,[2,123]),o($VM1,[2,124]),o($VM1,[2,125]),o($VM1,[2,126]),o($VM1,[2,127]),o($VM1,[2,128]),o($VM1,[2,129]),{19:[1,191]},o([19,23],[2,21],{9:$VC,58:$VD}),o($VN1,$VJ1),{7:192,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:193,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$VL1,22:$V21,30:$V31,52:194,53:$V41,59:188,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},{7:195,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,55]),{7:87,13:$V3,15:$V4,27:$V7,28:196,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$VL1,22:$V21,30:$V31,52:197,53:$V41,59:188,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},{7:200,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,34:[1,198],35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,60:199,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{7:87,13:$V3,15:$V4,18:201,27:$V7,28:86,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:202,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,54]),{7:87,13:$V3,15:$V4,27:$V7,28:203,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$VL1,22:$V21,30:$V31,52:204,53:$V41,59:188,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},o($VE,[2,53]),o($VE,$VJ,{54:205,33:$VF,36:$VK,51:$VL}),{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:206,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:207,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:208,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:209,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:210,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:211,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:212,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:213,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:214,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:215,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{9:$VC,34:[1,216],58:$VD},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:217,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:218,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:219,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,28]),{7:66,9:$Vu,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,37:[1,220],38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{6:64,9:[1,222],10:$V1,11:7,12:$V2,17:$V5,20:14,21:$V6,37:[1,221]},o($VR,[2,35]),{9:[1,224],39:[1,223]},o($VO1,[2,38]),{43:[1,225]},{13:[1,227],22:$V21,27:$V7,30:$V31,42:226,43:$VP1,46:125,47:126,48:127,53:$V41,59:128,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,116:$Vr,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},o($VQ1,[2,43]),o($VQ1,[2,44]),o($VQ1,[2,45]),o($VQ1,[2,63]),o($VR,[2,145]),o($VR,[2,146]),o($VR,[2,147]),o($VR,[2,148]),o($VR,[2,149]),o($VR,[2,150]),o($VR,[2,151]),o($VR,[2,152]),o($VR,[2,153]),o($VR,[2,154]),o($VR,[2,155]),o($VR,[2,156]),o($VR,[2,157]),o($VR,[2,158]),o($VR,[2,159]),o($VR,[2,160]),o($VR,[2,161]),o($VR,[2,162]),o($VR,[2,163]),o($VR,[2,164]),o($VR,[2,165]),o($VR,[2,166]),o($VR,[2,167]),o($VR,[2,168]),o($VR,[2,169]),o($VR,[2,170]),o($VR,[2,171]),o($VR,[2,172]),o($VR,[2,173]),o($VR,[2,174]),o($VR,[2,175]),o($VR,[2,176]),o($VR,[2,177]),o($VR,[2,178]),o($VR,[2,179]),o($VR,[2,180]),{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:228,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:229,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,142]),{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:230,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:231,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$V3,15:$V4,27:$V7,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,61:172,62:52,63:$Ve,64:$Vf,65:232,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vx,[2,77]),o($Vx,$Vy,{63:$Vz,64:$VA}),o($Vx,[2,78]),o($Vx,[2,79]),o($Vx,[2,80]),o($Vx,[2,81]),o($Vx,[2,82]),o($Vx,[2,83]),o($Vx,[2,84]),o($Vx,[2,85]),o($Vt,[2,7],{58:$VJ1}),{7:233,9:$Vu,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{13:$VK1,15:[1,234],16:[1,235],25:236},o($VR1,[2,17]),{26:[1,237]},o($Vw,[2,60],{54:238,33:$VF}),o($VR,[2,64]),o($VR,[2,65]),o($Vw,[2,117]),o($Vw,[2,118]),o($Vt,[2,14]),o([9,58],$VJ1,{43:[1,239]}),o($VH,[2,112],{93:$VI}),o($Vw,[2,58],{54:240,33:$VF}),o($VN1,[2,131]),{9:$VC,37:[1,241],58:$VD},o($VR,[2,57]),o($VR,[2,66]),{9:[1,243],34:[1,242]},o([9,34,58],[2,68]),{23:[1,244]},o($VM,[2,110],{88:$VN,89:$VO,90:$VP,91:$VQ}),{9:$VC,37:[1,245],58:$VD},o($VR,[2,50]),o($VR,[2,51]),o($VS,[2,105],{12:$VT,16:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($VS,[2,106],{12:$VT,16:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($VS,[2,107],{12:$VT,16:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($VS,[2,108],{12:$VT,16:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($VZ,[2,98],{79:$V_,80:$V$,81:$V01}),o($VZ,[2,99],{79:$V_,80:$V$,81:$V01}),o($VZ,[2,100],{79:$V_,80:$V$,81:$V01}),o($VZ,[2,101],{79:$V_,80:$V$,81:$V01}),o($VZ,[2,102],{79:$V_,80:$V$,81:$V01}),o($VZ,[2,103],{79:$V_,80:$V$,81:$V01}),o($VR,[2,26]),o($VC1,[2,94],{70:$VD1,71:$VE1}),o($VC1,[2,95],{70:$VD1,71:$VE1}),o($VC1,[2,96],{70:$VD1,71:$VE1}),o($VR,[2,29]),o($VR,[2,30]),{7:181,8:247,9:$V0,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,37:[1,246],38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,36]),{13:$V11,22:$V21,27:$V7,30:$V31,39:[1,248],41:249,42:123,46:125,47:126,48:127,53:$V41,59:128,67:$V51,85:$V61,86:$V71,113:$V81,114:$V91,115:$Va1,116:$Vr,119:$Vb1,120:$Vc1,121:$Vd1,122:$Ve1,123:$Vf1,124:$Vg1,125:$Vh1,126:$Vi1,127:$Vj1,128:$Vk1,129:$Vl1,130:$Vm1,131:$Vn1,132:$Vo1,133:$Vp1,134:$Vq1,135:$Vr1,136:$Vs1,137:$Vt1,138:$Vu1,139:$Vv1,140:$Vw1,141:$Vx1,142:$Vy1,143:$Vz1,144:$VA1,145:$VB1},{7:250,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{33:[1,251]},{33:$VP1},o($VF1,[2,91],{15:$VG1,75:$VH1,76:$VI1}),o($VF1,[2,92],{15:$VG1,75:$VH1,76:$VI1}),o($Vx,[2,87]),o($Vx,[2,88]),o($Vx,[2,89]),o($Vt,[2,8],{58:$VJ1}),{16:[1,252]},{4:254,6:3,7:4,8:5,9:$V0,10:$V1,11:7,12:[1,253],13:$V3,15:$V4,17:$V5,20:14,21:$V6,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR1,[2,18]),{27:[1,255]},o($Vw,[2,61]),{7:256,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($Vw,[2,59]),o($VR,[2,56]),o($VR,[2,67]),{7:257,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},{4:258,6:3,7:4,8:5,9:$V0,10:$V1,11:7,12:$V2,13:$V3,15:$V4,17:$V5,20:14,21:$V6,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,49]),o($VR,[2,31]),{7:233,9:$Vu,13:$V3,15:$V4,27:$V7,28:16,29:24,30:$V8,31:29,32:30,33:$V9,35:32,36:$Va,37:[1,259],38:$Vb,47:37,48:36,49:21,50:$Vc,53:$Vd,55:17,56:18,57:10,61:11,62:52,63:$Ve,64:$Vf,65:51,66:53,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:48,77:41,78:33,82:26,87:23,92:20,94:15,96:9,100:$Vn,110:34,111:35,112:38,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:47},o($VR,[2,37]),o($VO1,[2,39]),o($VO1,[2,40],{58:$VJ1}),{13:[1,262],34:[1,260],45:261},o($Vt,[2,11]),{13:$Vv,15:[1,263]},{6:64,9:$Vs,10:$V1,11:7,12:[1,264],17:$V5,20:14,21:$V6},o($VR1,[2,20]),o($Vw,[2,114]),o([9,34],[2,69],{58:$VJ1}),{6:64,9:$Vs,10:$V1,11:7,12:$V2,17:$V5,20:14,21:[1,265]},o($VR,[2,32]),{38:[1,266]},{34:[1,267]},{34:[2,46]},{13:[1,268]},{13:$Vv,15:[1,269]},{22:$VG,24:[1,270]},{44:[1,271]},{38:[1,272]},{16:[1,273]},{13:[1,274]},{23:[1,275]},{39:[1,276]},{44:[1,277]},o($Vt,[2,12]),{16:[1,278]},o($Vt,[2,16]),o($VO1,[2,41]),{39:[1,279]},o($Vt,[2,13]),o($VO1,[2,42])],
defaultActions: {49:[2,143],50:[2,144],63:[2,1],227:[2,62],262:[2,46]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function createSourceLocation(source, firstToken, lastToken) {
	return new SourceLocation(source, new Position(firstToken.first_line, firstToken.first_column), new Position(lastToken.last_line, lastToken.last_column));
}

function parseRegularExpressionLiteral(literal) {
	var last = literal.lastIndexOf("/");
	var body = literal.substring(1, last);
	var flags = literal.substring(last + 1);

	return new RegExp(body, flags);
}

function parseNumericLiteral(literal) {
	if (literal.charAt(0) === "0") {
		if (literal.charAt(1).toLowerCase() === "x") {
			return parseInt(literal, 16);
		} else {
			return parseInt(literal, 8);
		}
	} else {
		return Number(literal);
	}
}

/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
	parser.wasNewLine = false;
	parser.newLine = false;
	parser.restricted = false;

	return _originalParseMethod.call(this, source);
};

parser.parseError = function(str, hash) {
    //console.log(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
	if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
		throw new SyntaxError(str);
	}
};
/* End Parser Customization Methods */

/* Begin AST Node Constructors */
function DocumentNode(body, loc) {
    this.type = "Document";
    this.body = body;
    this.loc = loc;
}

function TextNode(text, loc) {
    this.type = "Text";
    this.text = text;
    this.loc = loc;
}

function ElementNode(name, attributes, body, loc) {
    this.type = "Element";
    this.name = name;
    this.attributes = attributes;
    this.body = body;
    this.loc = loc;
}

function AttributeNode(name, value, loc) {
    this.type = "Attribute";
    this.name = name;
    this.value = value;
    this.loc = loc;
}

function ExpressionStatementNode(expression, loc) {
    this.type = 'ExpressionStatement';
    this.expression = expression;
    this.loc = loc;
}

function IfStatementNode(test, consequent, alternate, loc) {
	this.type = "IfStatement";
	this.test = test;
	this.consequent = consequent;
	this.alternate = alternate;
	this.loc = loc;
}

function FilterExpressionNode(callee, args, loc) {
	this.type = "FilterExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function ThisExpressionNode(loc) {
	this.type = "ThisExpression";
	this.loc = loc;
}

function ArrayExpressionNode(elements, loc) {
	this.type = "ArrayExpression";
	this.elements = elements;
	this.loc = loc;
}

function ObjectExpressionNode(properties, loc) {
	this.type = "ObjectExpression";
	this.properties = properties;
	this.loc = loc;
}

function SequenceExpressionNode(expressions, loc) {
	this.type = "SequenceExpression";
	this.expressions = expressions;
	this.loc = loc;
}

function UnaryExpressionNode(operator, prefix, argument, loc) {
	this.type = "UnaryExpression";
	this.operator = operator;
	this.prefix = prefix;
	this.argument = argument;
	this.loc = loc;
}

function BinaryExpressionNode(operator, left, right, loc) {
	this.type = "BinaryExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function AssignmentExpressionNode(operator, left, right, loc) {
	this.type = "AssignmentExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function UpdateExpressionNode(operator, argument, prefix, loc) {
	this.type = "UpdateExpression";
	this.operator = operator;
	this.argument = argument;
	this.prefix = prefix;
	this.loc = loc;
}

function LogicalExpressionNode(operator, left, right, loc) {
	this.type = "LogicalExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function ConditionalExpressionNode(test, consequent, alternate, loc) {
	this.type = "ConditionalExpression";
	this.test = test;
	this.consequent = consequent;
	this.alternate = alternate;
	this.loc = loc;
}

function NewExpressionNode(callee, args, loc) {
	this.type = "NewExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function CallExpressionNode(callee, args, loc) {
	this.type = "CallExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function MemberExpressionNode(object, property, computed, loc) {
	this.type = "MemberExpression";
	this.object = object;
	this.property = property;
	this.computed = computed;
	this.loc = loc;
}

function IdentifierNode(name, loc) {
	this.type = "Identifier";
	this.name = name;
	this.loc = loc;
}

function AccessorNode(name, loc) {
	this.type = "Accessor";
	this.name = name;
	this.loc = loc;
}

function LiteralNode(value, loc) {
	this.type = "Literal";
	this.value = value;
	this.loc = loc;
}

function SourceLocation(source, start, end) {
	this.source = source;
	this.start = start;
	this.end = end;
}

function Position(line, column) {
	this.line = line;
	this.column = column;
}

/* Object and Array patterns are not part of the ECMAScript Standard
function ObjectPatternNode() {
	this.type = "ObjectPattern";
	this.properties = [];
}

function ArrayPatternNode() {
	this.type = "ArrayPattern";
	this.elements = [];
}
*/
/* End AST Node Constructors */

/* Expose the AST Node Constructors */
parser.ast = {};
parser.ast.DocumentNode = DocumentNode;
parser.ast.TextNode = TextNode;
parser.ast.ElementNode = ElementNode;
parser.ast.AttributeNode = AttributeNode;
parser.ast.ExpressionStatementNode = ExpressionStatementNode;
parser.ast.IfStatementNode = IfStatementNode;
parser.ast.FilterExpressionNode = FilterExpressionNode;
parser.ast.ThisExpressionNode = ThisExpressionNode;
parser.ast.ArrayExpressionNode = ArrayExpressionNode;
parser.ast.ObjectExpressionNode = ObjectExpressionNode;
parser.ast.SequenceExpressionNode = SequenceExpressionNode;
parser.ast.UnaryExpressionNode = UnaryExpressionNode;
parser.ast.BinaryExpressionNode = BinaryExpressionNode;
parser.ast.AssignmentExpressionNode = AssignmentExpressionNode;
parser.ast.UpdateExpressionNode = UpdateExpressionNode;
parser.ast.LogicalExpressionNode = LogicalExpressionNode;
parser.ast.ConditionalExpressionNode = ConditionalExpressionNode;
parser.ast.NewExpressionNode = NewExpressionNode;
parser.ast.CallExpressionNode = CallExpressionNode;
parser.ast.MemberExpressionNode = MemberExpressionNode;
parser.ast.IdentifierNode = IdentifierNode;
parser.ast.AccessorNode = AccessorNode;
parser.ast.LiteralNode = LiteralNode;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        this.begin("html");
                                        return "<";
                                   
break;
case 1:
                                        this.begin("expr");
                                        return "{{";
                                   
break;
case 2:
                                        this.begin("expr");
                                        return "{%";
                                   
break;
case 3:return "TEXT";
break;
case 4:
                                        this.popState();
                                        return ">";
                                   
break;
case 5:parser.restricted = false; return "IDENTIFIER";
break;
case 6:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 7:return "=";
break;
case 8:parser.restricted = false; return "STRING_LITERAL";
break;
case 9:return "/";
break;
case 10:
                                        this.popState();
                                        return "REGEXP_LITERAL";
                                   
break;
case 11:
                                        this.popState();
                                        return "}}";
                                   
break;
case 12:
                                        this.popState();
                                        return "%" + "}";
                                   
break;
case 13:return "BR++"; /* Handle restricted postfix production */
break;
case 14:return "BR--"; /* Handle restricted postfix production */
break;
case 15:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 16:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 17:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 18:parser.restricted = false; return "STRING_LITERAL";
break;
case 19:return "IF";
break;
case 20:return "ENDIF";
break;
case 21:return "IN";
break;
case 22:return "INSTANCEOF";
break;
case 23:parser.restricted = false; return "TRUE";
break;
case 24:parser.restricted = false; return "FALSE";
break;
case 25:parser.restricted = false; return "NULL";
break;
case 26:parser.restricted = false; return "IDENTIFIER";
break;
case 27:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 28:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 29:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 30:parser.restricted = false; return "{";
break;
case 31:return "}";
break;
case 32:parser.restricted = false; return "(";
break;
case 33:return ")";
break;
case 34:parser.restricted = false; return "[";
break;
case 35:return "]";
break;
case 36:return ".";
break;
case 37:parser.restricted = false; return ";";
break;
case 38:return ",";
break;
case 39:return "?";
break;
case 40:return ":";
break;
case 41:return "===";
break;
case 42:return "==";
break;
case 43:return "=";
break;
case 44:return "!==";
break;
case 45:return "!=";
break;
case 46:parser.restricted = false; return "!";
break;
case 47:return "<<=";
break;
case 48:return "<<";
break;
case 49:return "<=";
break;
case 50:return "<";
break;
case 51:return ">>>=";
break;
case 52:return ">>>";
break;
case 53:return ">>=";
break;
case 54:return ">>";
break;
case 55:return ">=";
break;
case 56:return ">";
break;
case 57:return "+=";
break;
case 58:parser.restricted = false; return "++";
break;
case 59:return "+";
break;
case 60:return "-=";
break;
case 61:parser.restricted = false; return "--";
break;
case 62:return "-";
break;
case 63:return "*=";
break;
case 64:return "*";
break;
case 65:return "/=";
break;
case 66:return "/";
break;
case 67:return "%=";
break;
case 68:return "%";
break;
case 69:return "&&";
break;
case 70:return "&=";
break;
case 71:return "&";
break;
case 72:return "||";
break;
case 73:return "|=";
break;
case 74:return "|";
break;
case 75:return "^=";
break;
case 76:return "^";
break;
case 77:parser.restricted = false; return "~";
break;
case 78:return "EOF";
break;
case 79:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:<)/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:([^(<|"{{")]+))/,/^(?:>)/,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/,/^(?:\s+)/,/^(?:=)/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:\/)/,/^(?:(((([^\n\r\*\\\/\[])|(\\([^\n\r]))|(\[([^\n\r\]\\]|(\\([^\n\r])))*\]))(([^\n\r\\\/\[])|(\\([^\n\r]))|(\[([^\n\r\]\\]|(\\([^\n\r])))*\]))*)\/(((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*)))/,/^(?:\}\})/,/^(?:%\})/,/^(?:(\r\n|\r|\n)+\s*\+\+)/,/^(?:(\r\n|\r|\n)+\s*--)/,/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:if)/,/^(?:endif)/,/^(?:in)/,/^(?:instanceof)/,/^(?:true)/,/^(?:false)/,/^(?:null)/,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?)))/,/^(?:([0][xX]([0-9a-fA-F])+))/,/^(?:([0]([0-7])+))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!==)/,/^(?:!=)/,/^(?:!)/,/^(?:<<=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>>=)/,/^(?:>>>)/,/^(?:>>=)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%=)/,/^(?:%)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:$)/,/^(?:.)/],
conditions: {"expr":{"rules":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":false},"regexp":{"rules":[10],"inclusive":false},"html":{"rules":[4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,78,79],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function() {
	parser.wasNewLine = parser.newLine;
	parser.newLine = false;

	return _originalLexMethod.call(this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}