/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,25],$V5=[1,46],$V6=[1,43],$V7=[1,24],$V8=[1,28],$V9=[1,36],$Va=[1,37],$Vb=[1,22],$Vc=[1,19],$Vd=[1,54],$Ve=[1,55],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,56],$Vj=[1,57],$Vk=[1,58],$Vl=[1,59],$Vm=[1,47],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,42],$Vr=[1,62],$Vs=[5,9,10,11,14,31],$Vt=[1,64],$Vu=[1,68],$Vv=[5,9,10,11,13,14,28,31,33,37,52],$Vw=[5,9,10,11,13,14,17,18,28,31,33,37,52,64,65,69,70,73,74,75,77,78,79,80,82,83,84,85,87,89,91],$Vx=[2,69],$Vy=[1,72],$Vz=[1,73],$VA=[9,15,17,21,24,27,30,31,32,44,47,57,58,61,62,63,64,65,66,67,94,107,108,109,110],$VB=[1,88],$VC=[1,87],$VD=[5,9,10,11,13,14,17,18,20,28,31,33,37,52,57,58,64,65,69,70,73,74,75,77,78,79,80,82,83,84,85,87,89,91,93,94,95,96,97,98,99,100,101,102,103],$VE=[1,92],$VF=[5,9,10,11,13,14,28,31,33,37,52,89,91],$VG=[1,93],$VH=[2,49],$VI=[1,95],$VJ=[1,96],$VK=[5,9,10,11,13,14,28,31,33,37,52,87,89,91],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[5,9,10,11,13,14,17,18,20,27,28,30,31,33,37,45,52,57,58,64,65,69,70,73,74,75,77,78,79,80,82,83,84,85,87,89,91,93,94,95,96,97,98,99,100,101,102,103],$VQ=[5,9,10,11,13,28,31,33,37,52,82,83,84,85,87,89,91],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,106],$VV=[1,107],$VW=[1,108],$VX=[5,9,10,11,13,14,18,28,31,33,37,52,77,78,79,80,82,83,84,85,87,89,91],$VY=[1,110],$VZ=[1,111],$V_=[1,112],$V$=[1,120],$V01=[1,143],$V11=[1,140],$V21=[1,146],$V31=[1,139],$V41=[1,138],$V51=[1,153],$V61=[1,151],$V71=[1,152],$V81=[1,125],$V91=[1,126],$Va1=[1,127],$Vb1=[1,128],$Vc1=[1,129],$Vd1=[1,130],$Ve1=[1,131],$Vf1=[1,132],$Vg1=[1,133],$Vh1=[1,134],$Vi1=[1,135],$Vj1=[1,136],$Vk1=[1,137],$Vl1=[1,141],$Vm1=[1,142],$Vn1=[1,144],$Vo1=[1,145],$Vp1=[1,147],$Vq1=[1,148],$Vr1=[1,149],$Vs1=[1,150],$Vt1=[1,154],$Vu1=[1,155],$Vv1=[1,156],$Vw1=[1,157],$Vx1=[1,158],$Vy1=[1,159],$Vz1=[1,160],$VA1=[5,9,10,11,13,14,18,28,31,33,37,52,73,74,75,77,78,79,80,82,83,84,85,87,89,91],$VB1=[1,161],$VC1=[1,162],$VD1=[5,9,10,11,13,14,18,28,31,33,37,52,64,65,73,74,75,77,78,79,80,82,83,84,85,87,89,91],$VE1=[1,165],$VF1=[1,164],$VG1=[1,166],$VH1=[2,127],$VI1=[9,13,28,31,52],$VJ1=[1,182],$VK1=[1,184],$VL1=[15,17,21,24,27,30,32,44,47,57,58,61,62,63,64,65,66,67,94,107,108,109,110],$VM1=[9,33],$VN1=[2,59],$VO1=[27,37],$VP1=[15,17,18];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Document":3,"ElementList":4,"EOF":5,"Element":6,"AssignmentExpression":7,"Elision":8,",":9,"TEXT":10,"{{":11,"ExpressionStatement":12,"}}":13,"<":14,"IDENTIFIER":15,"AttributeList":16,"/":17,">":18,"Attribute":19,"=":20,"STRING_LITERAL":21,"Expression":22,"PrimaryExpression":23,"THIS":24,"Literal":25,"ArrayLiteral":26,"(":27,")":28,"ObjectLiteral":29,"[":30,"]":31,"{":32,"}":33,"PropertyNameAndValueList":34,"PropertyAssignment":35,"PropertyName":36,":":37,"FunctionBody":38,"PropertySetParameterList":39,"IdentifierName":40,"StringLiteral":41,"NumericLiteral":42,"MemberExpression":43,"FunctionExpression":44,".":45,"AccessorName":46,"NEW":47,"Arguments":48,"NewExpression":49,"CallExpression":50,"FilterExpression":51,"|":52,"ReservedWord":53,"ArgumentList":54,"LeftHandSideExpression":55,"PostfixExpression":56,"++":57,"--":58,"UnaryExpression":59,"UnaryExpr":60,"TYPEOF":61,"BR++":62,"BR--":63,"+":64,"-":65,"~":66,"!":67,"MultiplicativeExpression":68,"*":69,"%":70,"AdditiveExpression":71,"ShiftExpression":72,"<<":73,">>":74,">>>":75,"RelationalExpression":76,"<=":77,">=":78,"INSTANCEOF":79,"IN":80,"EqualityExpression":81,"==":82,"!=":83,"===":84,"!==":85,"LogicalANDExpression":86,"&&":87,"LogicalORExpression":88,"||":89,"ConditionalExpression":90,"?":91,"AssignmentOperator":92,"*=":93,"/=":94,"%=":95,"+=":96,"-=":97,"<<=":98,">>=":99,">>>=":100,"&=":101,"^=":102,"|=":103,"NullLiteral":104,"BooleanLiteral":105,"RegularExpressionLiteral":106,"NULL":107,"TRUE":108,"FALSE":109,"NUMERIC_LITERAL":110,"RegularExpressionLiteralBegin":111,"REGEXP_LITERAL":112,"BREAK":113,"CASE":114,"CATCH":115,"CONTINUE":116,"DEBUGGER":117,"DEFAULT":118,"DELETE":119,"DO":120,"ELSE":121,"FINALLY":122,"FOR":123,"FUNCTION":124,"IF":125,"RETURN":126,"SWITCH":127,"THROW":128,"TRY":129,"VAR":130,"VOID":131,"WHILE":132,"WITH":133,"CLASS":134,"CONST":135,"ENUM":136,"EXPORT":137,"EXTENDS":138,"IMPORT":139,"SUPER":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:",",10:"TEXT",11:"{{",13:"}}",14:"<",15:"IDENTIFIER",17:"/",18:">",20:"=",21:"STRING_LITERAL",24:"THIS",27:"(",28:")",30:"[",31:"]",32:"{",33:"}",37:":",38:"FunctionBody",44:"FunctionExpression",45:".",47:"NEW",52:"|",57:"++",58:"--",61:"TYPEOF",62:"BR++",63:"BR--",64:"+",65:"-",66:"~",67:"!",69:"*",70:"%",73:"<<",74:">>",75:">>>",77:"<=",78:">=",79:"INSTANCEOF",80:"IN",82:"==",83:"!=",84:"===",85:"!==",87:"&&",89:"||",91:"?",93:"*=",94:"/=",95:"%=",96:"+=",97:"-=",98:"<<=",99:">>=",100:">>>=",101:"&=",102:"^=",103:"|=",107:"NULL",108:"TRUE",109:"FALSE",110:"NUMERIC_LITERAL",112:"REGEXP_LITERAL",113:"BREAK",114:"CASE",115:"CATCH",116:"CONTINUE",117:"DEBUGGER",118:"DEFAULT",119:"DELETE",120:"DO",121:"ELSE",122:"FINALLY",123:"FOR",124:"FUNCTION",125:"IF",126:"RETURN",127:"SWITCH",128:"THROW",129:"TRY",130:"VAR",131:"VOID",132:"WHILE",133:"WITH",134:"CLASS",135:"CONST",136:"ENUM",137:"EXPORT",138:"EXTENDS",139:"IMPORT",140:"SUPER"},
productions_: [0,[3,2],[4,1],[4,2],[4,0],[4,1],[4,2],[4,3],[4,4],[6,1],[6,3],[6,5],[6,8],[6,9],[16,1],[16,2],[16,0],[19,3],[12,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[26,2],[26,3],[26,3],[26,4],[26,5],[8,1],[8,2],[29,2],[29,3],[29,4],[34,1],[34,3],[35,3],[35,7],[35,8],[36,1],[36,1],[36,1],[39,1],[43,1],[43,1],[43,4],[43,3],[43,3],[49,1],[49,2],[50,2],[50,2],[50,4],[50,3],[51,3],[51,4],[51,3],[51,4],[40,1],[40,1],[46,1],[46,1],[48,2],[48,3],[54,1],[54,3],[55,1],[55,1],[56,1],[56,2],[56,2],[59,1],[59,1],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[68,1],[68,3],[68,3],[68,3],[71,1],[71,3],[71,3],[72,1],[72,3],[72,3],[72,3],[76,1],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[81,1],[81,3],[81,3],[81,3],[81,3],[86,1],[86,3],[88,1],[88,3],[90,1],[90,5],[7,1],[7,1],[7,3],[7,3],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[22,1],[22,3],[25,1],[25,1],[25,1],[25,1],[25,1],[104,1],[105,1],[105,1],[42,1],[41,1],[106,2],[111,1],[111,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = new DocumentNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0]));
            return this.$;
        
break;
case 2: case 5: case 35: case 65:

            this.$ = [$$[$0]];
        
break;
case 3: case 6: case 15:

            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 4: case 16: case 63:

            this.$ = [];
        
break;
case 7: case 36: case 66:

            this.$ = $$[$0-2].concat($$[$0]);
        
break;
case 8:

            this.$ = $$[$0-3].concat($$[$0-1]).concat($$[$0]);
        
break;
case 9:

          this.$ = new TextNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 10: case 23: case 64:

            this.$ = $$[$0-1];
        
break;
case 11:

            this.$ = new ElementNode($$[$0-3], $$[$0-2], [], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 12:

            if ($$[$0-6] == $$[$0-1]) {
                this.$ = new ElementNode($$[$0-6], $$[$0-5], [], createSourceLocation(null, _$[$0-7], _$[$0]));
            } else {
                throw new SyntaxError(
                    "Syntax error on line " + (yylineno + 1) + ":\n" +
                    "Tag identifiers should be same (<" + $$[$0-6] + "> != </" + $$[$0-1] + ">)"
                );
            }
        
break;
case 13:

            if ($$[$0-7] == $$[$0-1]) {
                this.$ = new ElementNode($$[$0-7], $$[$0-6], $$[$0-4], createSourceLocation(null, _$[$0-8], _$[$0]));
            } else {
                throw new SyntaxError(
                    "Syntax error on line " + (yylineno + 1) + ":\n" +
                    "Tag identifiers should be same (<" + $$[$0-7] + "> != </" + $$[$0-2] + ">)"
                );
            }
        
break;
case 14:

            this.$ = [$$[$0]]
        
break;
case 17:

            this.$ = new AttributeNode($$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 18:

            this.$ = new ExpressionStatementNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 19:

            this.$ = new ThisExpressionNode(createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 20: case 59: case 60:

            this.$ = new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 25:

            this.$ = new ArrayExpressionNode([], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 26: case 27:

            this.$ = new ArrayExpressionNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 28:

            this.$ = new ArrayExpressionNode($$[$0-2].concat(null), createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 29:

            this.$ = new ArrayExpressionNode($$[$0-3].concat($$[$0-1]), createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 30:

            this.$ = [null, null];
        
break;
case 31:

            this.$ = $$[$0-1].concat(null);
        
break;
case 32:

            this.$ = new ObjectExpressionNode([], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 33:

            this.$ = new ObjectExpressionNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 34:

            this.$ = new ObjectExpressionNode($$[$0-2], createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 37:

            this.$ = {key: $$[$0-2], value: $$[$0], kind: "init"};
        
break;
case 38:

            if ($$[$0-6] === "get") {
                this.$ = {key: $$[$0-5], value: (new FunctionExpressionNode(null, [], $$[$0-1], false, false, createSourceLocation(null, _$[$0-5], _$[$0]))), kind: "get"};
            } else {
                this.parseError("Invalid getter", {});
            }
        
break;
case 39:

            if ($$[$0-7] === "set") {
                this.$ = {key: $$[$0-6], value: (new FunctionExpressionNode(null, $$[$0-4], $$[$0-1], false, false, createSourceLocation(null, _$[$0-6], _$[$0]))), kind: "set"};
            } else {
                this.parseError("Invalid setter", {});
            }
        
break;
case 43:

            this.$ = [new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]))];
        
break;
case 46: case 53:

            this.$ = new MemberExpressionNode($$[$0-3], $$[$0-1], true, createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 47: case 54:

            this.$ = new MemberExpressionNode($$[$0-2], $$[$0], false, createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 48:

            this.$ = new NewExpressionNode($$[$0-1], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 50:

            this.$ = new NewExpressionNode($$[$0], null, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 51: case 52:

            this.$ = new CallExpressionNode($$[$0-1], $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 55: case 57:

            this.$ = new FilterExpressionNode($$[$0], [$$[$0-2]], createSourceLocation(null, _$[$0-2], _$[$0-1]));
        
break;
case 56: case 58:

            this.$ = new FilterExpressionNode($$[$0-1], [$$[$0-3]].concat($$[$0]), createSourceLocation(null, _$[$0-3], _$[$0-2]));
        
break;
case 61: case 62:

            this.$ = new AccessorNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 70:

            this.$ = new UpdateExpressionNode("++", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 71:

            this.$ = new UpdateExpressionNode("--", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 74:

            this.$ = new UnaryExpressionNode("typeof", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 75:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("++", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 76:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("--", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 77:

            this.$ = new UpdateExpressionNode("++", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 78:

            this.$ = new UpdateExpressionNode("--", $$[$0], true, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 79:

            this.$ = new UnaryExpressionNode("+", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 80:

            this.$ = new UnaryExpressionNode("-", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 81:

            this.$ = new UnaryExpressionNode("~", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 82:

            this.$ = new UnaryExpressionNode("!", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 84:

            this.$ = new BinaryExpressionNode("*", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 85:

            this.$ = new BinaryExpressionNode("/", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 86:

            this.$ = new BinaryExpressionNode("%", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 88:

            this.$ = new BinaryExpressionNode("+", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 89:

            this.$ = new BinaryExpressionNode("-", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 91:

            this.$ = new BinaryExpressionNode("<<", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 92:

            this.$ = new BinaryExpressionNode(">>", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 93:

            this.$ = new BinaryExpressionNode(">>>", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 95:

            this.$ = new BinaryExpressionNode("<", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 96:

            this.$ = new BinaryExpressionNode(">", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 97:

            this.$ = new BinaryExpressionNode("<=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 98:

            this.$ = new BinaryExpressionNode(">=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 99:

            this.$ = new BinaryExpressionNode("instanceof", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 100:

            this.$ = new BinaryExpressionNode("in", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 102:

            this.$ = new BinaryExpressionNode("==", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 103:

            this.$ = new BinaryExpressionNode("!=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 104:

            this.$ = new BinaryExpressionNode("===", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 105:

            this.$ = new BinaryExpressionNode("!==", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 107:

            this.$ = new LogicalExpressionNode("&&", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 109:

            this.$ = new LogicalExpressionNode("||", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 111:

            this.$ = new ConditionalExpressionNode($$[$0-4], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 114:

            this.$ = new AssignmentExpressionNode("=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 115:

            this.$ = new AssignmentExpressionNode($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 128:

            if ($$[$0-2].type === "SequenceExpression") {
                $$[$0-2].expressions.concat($$[$0]);
                $$[$0-2].loc = createSourceLocation(null, _$[$0-2], _$[$0]);
                this.$ = $$[$0-2];
            } else {
                this.$ = new SequenceExpressionNode([$$[$0-2], $$[$0]], createSourceLocation(null, _$[$0-2], _$[$0]));
            }
        
break;
case 134:

            this.$ = new LiteralNode(null, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 135:

            this.$ = new LiteralNode(true, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 136:

            this.$ = new LiteralNode(false, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 137:

            this.$ = new LiteralNode(parseNumericLiteral($$[$0]), createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 138:

            this.$ = new LiteralNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 139:

            this.$ = new LiteralNode(parseRegularExpressionLiteral($$[$0-1] + $$[$0]), createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 140: case 141:

            yy.lexer.begin("regexp");
        
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,7:4,8:5,9:$V0,10:$V1,11:$V2,14:$V3,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{1:[3]},{5:[1,60],6:61,9:$Vr,10:$V1,11:$V2,14:$V3},o($Vs,[2,2]),o([5,9,10,11,14,31,52],[2,5]),{7:63,9:$Vt,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vs,[2,9]),{7:67,12:65,15:$V4,17:$V5,21:$V6,22:66,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$Vu},o($Vv,[2,112]),o([5,9,10,11,13,14,28,31,33,37],[2,113],{52:[1,69]}),o($Vw,$Vx,{92:71,20:[1,70],57:$Vy,58:$Vz,93:[1,74],94:[1,75],95:[1,76],96:[1,77],97:[1,78],98:[1,79],99:[1,80],100:[1,81],101:[1,82],102:[1,83],103:[1,84]}),o($VA,[2,30]),o($Vv,[2,110],{89:[1,86],91:[1,85]}),{9:$VB,52:$VC},o($VD,[2,67]),o($VD,[2,68],{48:89,27:$VE,30:[1,90],45:[1,91]}),o($VF,[2,108],{87:$VG}),o($VD,$VH,{48:94,27:$VE,30:$VI,45:$VJ}),{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:98,44:$Vb,47:$Vc,49:97,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VK,[2,106],{82:$VL,83:$VM,84:$VN,85:$VO}),o($VP,[2,44]),o($VP,[2,45]),o($VQ,[2,101],{14:$VR,18:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VP,[2,19]),o($VP,[2,20]),o($VP,[2,21]),o($VP,[2,22]),{7:67,15:$V4,17:$V5,21:$V6,22:109,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,24]),o($VX,[2,94],{73:$VY,74:$VZ,75:$V_}),o($VP,[2,129]),o($VP,[2,130]),o($VP,[2,131]),o($VP,[2,132]),o($VP,[2,133]),{4:115,6:3,7:4,8:114,9:$V0,10:$V1,11:$V2,14:$V3,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,31:[1,113],32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V$,21:$V6,24:$V01,33:[1,116],34:117,35:118,36:119,40:121,41:122,42:123,47:$V11,53:124,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,110:$Vq,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},o($VA1,[2,90],{64:$VB1,65:$VC1}),o($VP,[2,134]),o($VP,[2,135]),o($VP,[2,136]),o($VP,[2,137]),o($VP,[2,138]),{112:[1,163]},o($VD1,[2,87],{17:$VE1,69:$VF1,70:$VG1}),{112:[2,140]},{112:[2,141]},o($Vw,[2,83]),o($Vw,[2,72]),o($Vw,[2,73]),{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:167,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:169,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:170,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:171,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:172,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:173,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:174,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:175,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:176,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{1:[2,1]},o($Vs,[2,3]),{7:177,8:178,9:$V0,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vs,[2,6],{52:$VH1}),o($VA,[2,31]),{13:[1,179]},{9:$VB,13:[2,18],52:$VC},o($VI1,$VH1),o([17,18],[2,16],{16:180,19:181,15:$VJ1}),{15:$VK1,24:$V01,46:183,47:$V11,53:185,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},{7:186,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{7:187,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vw,[2,70]),o($Vw,[2,71]),o($VL1,[2,116]),o($VL1,[2,117]),o($VL1,[2,118]),o($VL1,[2,119]),o($VL1,[2,120]),o($VL1,[2,121]),o($VL1,[2,122]),o($VL1,[2,123]),o($VL1,[2,124]),o($VL1,[2,125]),o($VL1,[2,126]),{7:188,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:189,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$VK1,24:$V01,46:190,47:$V11,53:185,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},{7:191,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,52]),{7:67,15:$V4,17:$V5,21:$V6,22:192,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$VK1,24:$V01,46:193,47:$V11,53:185,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},{7:196,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,28:[1,194],29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,54:195,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:197,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,51]),{7:67,15:$V4,17:$V5,21:$V6,22:198,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$VK1,24:$V01,46:199,47:$V11,53:185,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},o($VD,[2,50]),o($VD,$VH,{48:200,27:$VE,30:$VI,45:$VJ}),{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:201,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:202,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:203,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:204,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:205,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:206,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:207,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:208,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:209,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:210,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{9:$VB,28:[1,211],52:$VC},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:212,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:213,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:214,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,25]),{7:63,9:$Vt,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,31:[1,215],32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{6:61,9:[1,217],10:$V1,11:$V2,14:$V3,31:[1,216]},o($VP,[2,32]),{9:[1,219],33:[1,218]},o($VM1,[2,35]),{37:[1,220]},{15:[1,222],21:$V6,24:$V01,36:221,37:$VN1,40:121,41:122,42:123,47:$V11,53:124,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,110:$Vq,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},o($VO1,[2,40]),o($VO1,[2,41]),o($VO1,[2,42]),o($VO1,[2,60]),o($VP,[2,142]),o($VP,[2,143]),o($VP,[2,144]),o($VP,[2,145]),o($VP,[2,146]),o($VP,[2,147]),o($VP,[2,148]),o($VP,[2,149]),o($VP,[2,150]),o($VP,[2,151]),o($VP,[2,152]),o($VP,[2,153]),o($VP,[2,154]),o($VP,[2,155]),o($VP,[2,156]),o($VP,[2,157]),o($VP,[2,158]),o($VP,[2,159]),o($VP,[2,160]),o($VP,[2,161]),o($VP,[2,162]),o($VP,[2,163]),o($VP,[2,164]),o($VP,[2,165]),o($VP,[2,166]),o($VP,[2,167]),o($VP,[2,168]),o($VP,[2,169]),o($VP,[2,170]),o($VP,[2,171]),o($VP,[2,172]),o($VP,[2,173]),o($VP,[2,174]),o($VP,[2,175]),o($VP,[2,176]),o($VP,[2,177]),{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:223,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:224,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,139]),{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:225,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:226,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{15:$V4,17:$V5,21:$V6,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,55:168,56:49,57:$Vd,58:$Ve,59:227,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vw,[2,74]),o($Vw,$Vx,{57:$Vy,58:$Vz}),o($Vw,[2,75]),o($Vw,[2,76]),o($Vw,[2,77]),o($Vw,[2,78]),o($Vw,[2,79]),o($Vw,[2,80]),o($Vw,[2,81]),o($Vw,[2,82]),o($Vs,[2,7],{52:$VH1}),{7:228,9:$Vt,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vs,[2,10]),{15:$VJ1,17:[1,229],18:[1,230],19:231},o($VP1,[2,14]),{20:[1,232]},o($Vv,[2,57],{48:233,27:$VE}),o($VP,[2,61]),o($VP,[2,62]),o($Vv,[2,114]),o($Vv,[2,115]),o([9,52],$VH1,{37:[1,234]}),o($VF,[2,109],{87:$VG}),o($Vv,[2,55],{48:235,27:$VE}),o($VI1,[2,128]),{9:$VB,31:[1,236],52:$VC},o($VP,[2,54]),o($VP,[2,63]),{9:[1,238],28:[1,237]},o([9,28,52],[2,65]),o($VK,[2,107],{82:$VL,83:$VM,84:$VN,85:$VO}),{9:$VB,31:[1,239],52:$VC},o($VP,[2,47]),o($VP,[2,48]),o($VQ,[2,102],{14:$VR,18:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VQ,[2,103],{14:$VR,18:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VQ,[2,104],{14:$VR,18:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VQ,[2,105],{14:$VR,18:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VX,[2,95],{73:$VY,74:$VZ,75:$V_}),o($VX,[2,96],{73:$VY,74:$VZ,75:$V_}),o($VX,[2,97],{73:$VY,74:$VZ,75:$V_}),o($VX,[2,98],{73:$VY,74:$VZ,75:$V_}),o($VX,[2,99],{73:$VY,74:$VZ,75:$V_}),o($VX,[2,100],{73:$VY,74:$VZ,75:$V_}),o($VP,[2,23]),o($VA1,[2,91],{64:$VB1,65:$VC1}),o($VA1,[2,92],{64:$VB1,65:$VC1}),o($VA1,[2,93],{64:$VB1,65:$VC1}),o($VP,[2,26]),o($VP,[2,27]),{7:177,8:241,9:$V0,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,31:[1,240],32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,33]),{15:$V$,21:$V6,24:$V01,33:[1,242],35:243,36:119,40:121,41:122,42:123,47:$V11,53:124,61:$V21,79:$V31,80:$V41,107:$V51,108:$V61,109:$V71,110:$Vq,113:$V81,114:$V91,115:$Va1,116:$Vb1,117:$Vc1,118:$Vd1,119:$Ve1,120:$Vf1,121:$Vg1,122:$Vh1,123:$Vi1,124:$Vj1,125:$Vk1,126:$Vl1,127:$Vm1,128:$Vn1,129:$Vo1,130:$Vp1,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1,135:$Vu1,136:$Vv1,137:$Vw1,138:$Vx1,139:$Vy1,140:$Vz1},{7:244,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},{27:[1,245]},{27:$VN1},o($VD1,[2,88],{17:$VE1,69:$VF1,70:$VG1}),o($VD1,[2,89],{17:$VE1,69:$VF1,70:$VG1}),o($Vw,[2,84]),o($Vw,[2,85]),o($Vw,[2,86]),o($Vs,[2,8],{52:$VH1}),{18:[1,246]},{4:248,6:3,7:4,8:5,9:$V0,10:$V1,11:$V2,14:[1,247],15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP1,[2,15]),{21:[1,249]},o($Vv,[2,58]),{7:250,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($Vv,[2,56]),o($VP,[2,53]),o($VP,[2,64]),{7:251,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,46]),o($VP,[2,28]),{7:228,9:$Vt,15:$V4,17:$V5,21:$V6,22:14,23:21,24:$V7,25:26,26:27,27:$V8,29:29,30:$V9,31:[1,252],32:$Va,41:34,42:33,43:18,44:$Vb,47:$Vc,49:15,50:16,51:10,55:11,56:49,57:$Vd,58:$Ve,59:48,60:50,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:45,71:38,72:30,76:23,81:20,86:17,88:13,90:9,94:$Vm,104:31,105:32,106:35,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:44},o($VP,[2,34]),o($VM1,[2,36]),o($VM1,[2,37],{52:$VH1}),{15:[1,255],28:[1,253],39:254},o($Vs,[2,11]),{15:$Vu,17:[1,256]},{6:61,9:$Vr,10:$V1,11:$V2,14:[1,257]},o($VP1,[2,17]),o($Vv,[2,111]),o([9,28],[2,66],{52:$VH1}),o($VP,[2,29]),{32:[1,258]},{28:[1,259]},{28:[2,43]},{15:[1,260]},{15:$Vu,17:[1,261]},{38:[1,262]},{32:[1,263]},{18:[1,264]},{15:[1,265]},{33:[1,266]},{38:[1,267]},o($Vs,[2,12]),{18:[1,268]},o($VM1,[2,38]),{33:[1,269]},o($Vs,[2,13]),o($VM1,[2,39])],
defaultActions: {46:[2,140],47:[2,141],60:[2,1],222:[2,59],255:[2,43]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function createSourceLocation(source, firstToken, lastToken) {
	return new SourceLocation(source, new Position(firstToken.first_line, firstToken.first_column), new Position(lastToken.last_line, lastToken.last_column));
}

function parseRegularExpressionLiteral(literal) {
	var last = literal.lastIndexOf("/");
	var body = literal.substring(1, last);
	var flags = literal.substring(last + 1);

	return new RegExp(body, flags);
}

function parseNumericLiteral(literal) {
	if (literal.charAt(0) === "0") {
		if (literal.charAt(1).toLowerCase() === "x") {
			return parseInt(literal, 16);
		} else {
			return parseInt(literal, 8);
		}
	} else {
		return Number(literal);
	}
}

/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
	parser.wasNewLine = false;
	parser.newLine = false;
	parser.restricted = false;

	return _originalParseMethod.call(this, source);
};

parser.parseError = function(str, hash) {
    //console.log(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
	if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
		throw new SyntaxError(str);
	}
};
/* End Parser Customization Methods */

/* Begin AST Node Constructors */
function DocumentNode(body, loc) {
    this.type = "Document";
    this.body = body;
    this.loc = loc;
}

function TextNode(text, loc) {
    this.type = "Text";
    this.text = text;
    this.loc = loc;
}

function ElementNode(name, attributes, body, loc) {
    this.type = "Element";
    this.name = name;
    this.attributes = attributes;
    this.body = body;
    this.loc = loc;
}

function AttributeNode(name, value, loc) {
    this.type = "Attribute";
    this.name = name;
    this.value = value;
    this.loc = loc;
}

function ExpressionStatementNode(expression, loc) {
    this.type = 'ExpressionStatement';
    this.expression = expression;
    this.loc = loc;
}

function FilterExpressionNode(callee, args, loc) {
	this.type = "FilterExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function ThisExpressionNode(loc) {
	this.type = "ThisExpression";
	this.loc = loc;
}

function ArrayExpressionNode(elements, loc) {
	this.type = "ArrayExpression";
	this.elements = elements;
	this.loc = loc;
}

function ObjectExpressionNode(properties, loc) {
	this.type = "ObjectExpression";
	this.properties = properties;
	this.loc = loc;
}

function SequenceExpressionNode(expressions, loc) {
	this.type = "SequenceExpression";
	this.expressions = expressions;
	this.loc = loc;
}

function UnaryExpressionNode(operator, prefix, argument, loc) {
	this.type = "UnaryExpression";
	this.operator = operator;
	this.prefix = prefix;
	this.argument = argument;
	this.loc = loc;
}

function BinaryExpressionNode(operator, left, right, loc) {
	this.type = "BinaryExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function AssignmentExpressionNode(operator, left, right, loc) {
	this.type = "AssignmentExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function UpdateExpressionNode(operator, argument, prefix, loc) {
	this.type = "UpdateExpression";
	this.operator = operator;
	this.argument = argument;
	this.prefix = prefix;
	this.loc = loc;
}

function LogicalExpressionNode(operator, left, right, loc) {
	this.type = "LogicalExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
	this.loc = loc;
}

function ConditionalExpressionNode(test, consequent, alternate, loc) {
	this.type = "ConditionalExpression";
	this.test = test;
	this.consequent = consequent;
	this.alternate = alternate;
	this.loc = loc;
}

function NewExpressionNode(callee, args, loc) {
	this.type = "NewExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function CallExpressionNode(callee, args, loc) {
	this.type = "CallExpression";
	this.callee = callee;
	this.arguments = args;
	this.loc = loc;
}

function MemberExpressionNode(object, property, computed, loc) {
	this.type = "MemberExpression";
	this.object = object;
	this.property = property;
	this.computed = computed;
	this.loc = loc;
}

function IdentifierNode(name, loc) {
	this.type = "Identifier";
	this.name = name;
	this.loc = loc;
}

function AccessorNode(name, loc) {
	this.type = "Accessor";
	this.name = name;
	this.loc = loc;
}

function LiteralNode(value, loc) {
	this.type = "Literal";
	this.value = value;
	this.loc = loc;
}

function SourceLocation(source, start, end) {
	this.source = source;
	this.start = start;
	this.end = end;
}

function Position(line, column) {
	this.line = line;
	this.column = column;
}

/* Object and Array patterns are not part of the ECMAScript Standard
function ObjectPatternNode() {
	this.type = "ObjectPattern";
	this.properties = [];
}

function ArrayPatternNode() {
	this.type = "ArrayPattern";
	this.elements = [];
}
*/
/* End AST Node Constructors */

/* Expose the AST Node Constructors */
parser.ast = {};
parser.ast.DocumentNode = DocumentNode;
parser.ast.TextNode = TextNode;
parser.ast.ElementNode = ElementNode;
parser.ast.AttributeNode = AttributeNode;
parser.ast.ExpressionStatementNode = ExpressionStatementNode;
parser.ast.FilterExpressionNode = FilterExpressionNode;
parser.ast.ThisExpressionNode = ThisExpressionNode;
parser.ast.ArrayExpressionNode = ArrayExpressionNode;
parser.ast.ObjectExpressionNode = ObjectExpressionNode;
parser.ast.SequenceExpressionNode = SequenceExpressionNode;
parser.ast.UnaryExpressionNode = UnaryExpressionNode;
parser.ast.BinaryExpressionNode = BinaryExpressionNode;
parser.ast.AssignmentExpressionNode = AssignmentExpressionNode;
parser.ast.UpdateExpressionNode = UpdateExpressionNode;
parser.ast.LogicalExpressionNode = LogicalExpressionNode;
parser.ast.ConditionalExpressionNode = ConditionalExpressionNode;
parser.ast.NewExpressionNode = NewExpressionNode;
parser.ast.CallExpressionNode = CallExpressionNode;
parser.ast.MemberExpressionNode = MemberExpressionNode;
parser.ast.IdentifierNode = IdentifierNode;
parser.ast.AccessorNode = AccessorNode;
parser.ast.LiteralNode = LiteralNode;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        this.begin("html");
                                        return "<";
                                   
break;
case 1:
                                        this.begin("expr");
                                        return "{{";
                                   
break;
case 2:return "TEXT";
break;
case 3:
                                        this.popState();
                                        return ">";
                                   
break;
case 4:parser.restricted = false; return "IDENTIFIER";
break;
case 5:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 6:return "=";
break;
case 7:parser.restricted = false; return "STRING_LITERAL";
break;
case 8:return "/";
break;
case 9:
                                        this.popState();
                                        return "REGEXP_LITERAL";
                                   
break;
case 10:
                                        this.popState();
                                        return "}}";
                                   
break;
case 11:return "BR++"; /* Handle restricted postfix production */
break;
case 12:return "BR--"; /* Handle restricted postfix production */
break;
case 13:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 14:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 15:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }

                                        if (parser.restricted && parser.newLine) {
                                            this.unput(yy_.yytext);
                                            parser.restricted = false;
                                            return ";";
                                        }
                                   
break;
case 16:parser.restricted = false; return "STRING_LITERAL";
break;
case 17:return "IN";
break;
case 18:return "INSTANCEOF";
break;
case 19:parser.restricted = false; return "TRUE";
break;
case 20:parser.restricted = false; return "FALSE";
break;
case 21:parser.restricted = false; return "NULL";
break;
case 22:parser.restricted = false; return "IDENTIFIER";
break;
case 23:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 24:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 25:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 26:parser.restricted = false; return "{";
break;
case 27:return "}";
break;
case 28:parser.restricted = false; return "(";
break;
case 29:return ")";
break;
case 30:parser.restricted = false; return "[";
break;
case 31:return "]";
break;
case 32:return ".";
break;
case 33:parser.restricted = false; return ";";
break;
case 34:return ",";
break;
case 35:return "?";
break;
case 36:return ":";
break;
case 37:return "===";
break;
case 38:return "==";
break;
case 39:return "=";
break;
case 40:return "!==";
break;
case 41:return "!=";
break;
case 42:parser.restricted = false; return "!";
break;
case 43:return "<<=";
break;
case 44:return "<<";
break;
case 45:return "<=";
break;
case 46:return "<";
break;
case 47:return ">>>=";
break;
case 48:return ">>>";
break;
case 49:return ">>=";
break;
case 50:return ">>";
break;
case 51:return ">=";
break;
case 52:return ">";
break;
case 53:return "+=";
break;
case 54:parser.restricted = false; return "++";
break;
case 55:return "+";
break;
case 56:return "-=";
break;
case 57:parser.restricted = false; return "--";
break;
case 58:return "-";
break;
case 59:return "*=";
break;
case 60:return "*";
break;
case 61:return "/=";
break;
case 62:return "/";
break;
case 63:return "%=";
break;
case 64:return "%";
break;
case 65:return "&&";
break;
case 66:return "&=";
break;
case 67:return "&";
break;
case 68:return "||";
break;
case 69:return "|=";
break;
case 70:return "|";
break;
case 71:return "^=";
break;
case 72:return "^";
break;
case 73:parser.restricted = false; return "~";
break;
case 74:return "EOF";
break;
case 75:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:<)/,/^(?:\{\{)/,/^(?:([^(<|"{{")]+))/,/^(?:>)/,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/,/^(?:\s+)/,/^(?:=)/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:\/)/,/^(?:(((([^\n\r\*\\\/\[])|(\\([^\n\r]))|(\[([^\n\r\]\\]|(\\([^\n\r])))*\]))(([^\n\r\\\/\[])|(\\([^\n\r]))|(\[([^\n\r\]\\]|(\\([^\n\r])))*\]))*)\/(((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*)))/,/^(?:\}\})/,/^(?:(\r\n|\r|\n)+\s*\+\+)/,/^(?:(\r\n|\r|\n)+\s*--)/,/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:in)/,/^(?:instanceof)/,/^(?:true)/,/^(?:false)/,/^(?:null)/,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?)))/,/^(?:([0][xX]([0-9a-fA-F])+))/,/^(?:([0]([0-7])+))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!==)/,/^(?:!=)/,/^(?:!)/,/^(?:<<=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>>=)/,/^(?:>>>)/,/^(?:>>=)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%=)/,/^(?:%)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:$)/,/^(?:.)/],
conditions: {"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":false},"regexp":{"rules":[9],"inclusive":false},"html":{"rules":[3,4,5,6,7,8],"inclusive":false},"INITIAL":{"rules":[0,1,2,74,75],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function() {
	parser.wasNewLine = parser.newLine;
	parser.newLine = false;

	return _originalLexMethod.call(this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}