#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var program = require('commander');
var Monkberry = require('../lib/index');

program
  .usage('[options] <file ...>')
  .option('-o, --output [file]', 'output file name, if not specified will write to stdout.')
  .option('-s, --source-map', 'generate source map.')
  .option('-p, --parser [type]', 'parser to use', 'default')
  .option('--as-library', 'compile only custom tags.')
  .option('--transform [require]', 'transform for ast.')
  .option('--globals [variable, ...]', 'comma separated list of global variables.')
  .parse(process.argv);

if (program.args.length == 0) {
  program.outputHelp();
  process.exit(0);
}

var utf8 = {encoding: 'utf8'};
var compiler = new Monkberry.Compiler();

try {
  var transform = program.transform;
  if (transform) {
    var name = path.parse(transform).name;
    compiler.transforms[name] = require(transform);
  }
} catch (error) {
  console.error('Can not require transform `' + transform + '`.');
  throw error;
}

if (program.globals) {
  compiler.globals = program.globals.split(',').map(v => v.trim());
}

program.args.forEach(function (file) {
  var code = fs.readFileSync(file, utf8);
  compiler.addSource(path.basename(file), code, program.parser, program.asLibrary);
});

var output, node = compiler.compile();

if (program.output) {
  var file = program.output,
    filename = path.basename(file),
    sourceMapFileName = filename + '.map',
    sourceMapPath = file + '.map';

  if (program.sourceMap) {
    output = node.toStringWithSourceMap({
      file: filename
    });

    var smu = '//# sourceMappingURL=' + sourceMapFileName + '\n';

    fs.writeFileSync(file, output.code + smu, utf8);
    fs.writeFileSync(sourceMapPath, output.map, utf8);
  } else {
    fs.writeFileSync(file, node.toString(), utf8);
  }
} else {
  console.log(node.toString());
}
